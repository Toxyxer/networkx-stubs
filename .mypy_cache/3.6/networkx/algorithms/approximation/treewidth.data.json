{".class": "MypyFile", "_fullname": "networkx.algorithms.approximation.treewidth", "is_partial_stub_package": false, "is_stub": false, "names": {".class": "SymbolTable", "MinDegreeHeuristic": {".class": "SymbolTableNode", "kind": "Gdef", "module_public": false, "node": {".class": "TypeInfo", "_promote": null, "abstract_attributes": [], "bases": ["builtins.object"], "declared_metaclass": null, "defn": {".class": "ClassDef", "fullname": "networkx.algorithms.approximation.treewidth.MinDegreeHeuristic", "name": "MinDegreeHeuristic", "type_vars": []}, "flags": [], "fullname": "networkx.algorithms.approximation.treewidth.MinDegreeHeuristic", "metaclass_type": null, "metadata": {}, "module_name": "networkx.algorithms.approximation.treewidth", "mro": ["networkx.algorithms.approximation.treewidth.MinDegreeHeuristic", "builtins.object"], "names": {".class": "SymbolTable", "__init__": {".class": "SymbolTableNode", "kind": "Mdef", "node": {".class": "FuncDef", "arg_kinds": [0, 0], "arg_names": ["self", "graph"], "flags": [], "fullname": "networkx.algorithms.approximation.treewidth.MinDegreeHeuristic.__init__", "name": "__init__", "type": null}}, "_degreeq": {".class": "SymbolTableNode", "implicit": true, "kind": "Mdef", "node": {".class": "Var", "flags": [], "fullname": "networkx.algorithms.approximation.treewidth.MinDegreeHeuristic._degreeq", "name": "_degreeq", "type": null}}, "_graph": {".class": "SymbolTableNode", "implicit": true, "kind": "Mdef", "node": {".class": "Var", "flags": [], "fullname": "networkx.algorithms.approximation.treewidth.MinDegreeHeuristic._graph", "name": "_graph", "type": null}}, "_update_nodes": {".class": "SymbolTableNode", "implicit": true, "kind": "Mdef", "node": {".class": "Var", "flags": [], "fullname": "networkx.algorithms.approximation.treewidth.MinDegreeHeuristic._update_nodes", "name": "_update_nodes", "type": null}}, "best_node": {".class": "SymbolTableNode", "kind": "Mdef", "node": {".class": "FuncDef", "arg_kinds": [0, 0], "arg_names": ["self", "graph"], "flags": [], "fullname": "networkx.algorithms.approximation.treewidth.MinDegreeHeuristic.best_node", "name": "best_node", "type": null}}}, "tuple_type": null, "type_vars": [], "typeddict_type": null}}, "__all__": {".class": "SymbolTableNode", "kind": "Gdef", "module_public": false, "node": {".class": "Var", "flags": [], "fullname": "networkx.algorithms.approximation.treewidth.__all__", "name": "__all__", "type": null}}, "__doc__": {".class": "SymbolTableNode", "kind": "Gdef", "module_public": false, "node": {".class": "Var", "flags": ["is_ready"], "fullname": "networkx.algorithms.approximation.treewidth.__doc__", "name": "__doc__", "type": "builtins.str"}}, "__file__": {".class": "SymbolTableNode", "kind": "Gdef", "module_public": false, "node": {".class": "Var", "flags": ["is_ready"], "fullname": "networkx.algorithms.approximation.treewidth.__file__", "name": "__file__", "type": "builtins.str"}}, "__name__": {".class": "SymbolTableNode", "kind": "Gdef", "module_public": false, "node": {".class": "Var", "flags": ["is_ready"], "fullname": "networkx.algorithms.approximation.treewidth.__name__", "name": "__name__", "type": "builtins.str"}}, "__package__": {".class": "SymbolTableNode", "kind": "Gdef", "module_public": false, "node": {".class": "Var", "flags": ["is_ready"], "fullname": "networkx.algorithms.approximation.treewidth.__package__", "name": "__package__", "type": "builtins.str"}}, "heapify": {".class": "SymbolTableNode", "cross_ref": "heapq.heapify", "kind": "Gdef", "module_public": false}, "heappop": {".class": "SymbolTableNode", "cross_ref": "heapq.heappop", "kind": "Gdef", "module_public": false}, "heappush": {".class": "SymbolTableNode", "cross_ref": "heapq.heappush", "kind": "Gdef", "module_public": false}, "itertools": {".class": "SymbolTableNode", "cross_ref": "itertools", "kind": "Gdef", "module_public": false}, "min_fill_in_heuristic": {".class": "SymbolTableNode", "kind": "Gdef", "module_public": false, "node": {".class": "FuncDef", "arg_kinds": [0], "arg_names": ["graph"], "flags": [], "fullname": "networkx.algorithms.approximation.treewidth.min_fill_in_heuristic", "name": "min_fill_in_heuristic", "type": null}}, "not_implemented_for": {".class": "SymbolTableNode", "cross_ref": "networkx.utils.decorators.not_implemented_for", "kind": "Gdef", "module_public": false}, "nx": {".class": "SymbolTableNode", "cross_ref": "networkx", "kind": "Gdef", "module_public": false}, "sys": {".class": "SymbolTableNode", "cross_ref": "sys", "kind": "Gdef", "module_public": false}, "treewidth_decomp": {".class": "SymbolTableNode", "kind": "Gdef", "module_public": false, "node": {".class": "FuncDef", "arg_kinds": [0, 1], "arg_names": ["G", "heuristic"], "flags": [], "fullname": "networkx.algorithms.approximation.treewidth.treewidth_decomp", "name": "treewidth_decomp", "type": null}}, "treewidth_min_degree": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "Decorator", "func": {".class": "FuncDef", "arg_kinds": [0], "arg_names": ["G"], "flags": ["is_decorated"], "fullname": "networkx.algorithms.approximation.treewidth.treewidth_min_degree", "name": "treewidth_min_degree", "type": null}, "is_overload": false, "var": {".class": "Var", "flags": [], "fullname": null, "name": "treewidth_min_degree", "type": {".class": "AnyType", "missing_import_name": null, "source_any": {".class": "AnyType", "missing_import_name": null, "source_any": null, "type_of_any": 1}, "type_of_any": 7}}}}, "treewidth_min_fill_in": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "Decorator", "func": {".class": "FuncDef", "arg_kinds": [0], "arg_names": ["G"], "flags": ["is_decorated"], "fullname": "networkx.algorithms.approximation.treewidth.treewidth_min_fill_in", "name": "treewidth_min_fill_in", "type": null}, "is_overload": false, "var": {".class": "Var", "flags": [], "fullname": null, "name": "treewidth_min_fill_in", "type": {".class": "AnyType", "missing_import_name": null, "source_any": {".class": "AnyType", "missing_import_name": null, "source_any": null, "type_of_any": 1}, "type_of_any": 7}}}}}, "path": "/home/fmagin/.virtualenvs/angr/lib/python3.7/site-packages/networkx/algorithms/approximation/treewidth.py"}